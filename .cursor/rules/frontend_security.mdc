---
description: 
globs: 
alwaysApply: false
---
# Frontend Security Best Practices

This rule enforces critical security measures for frontend code to protect against common web vulnerabilities.

## HTTPS Everywhere

- **Use HTTPS for All Communications**
  - Prevent man-in-the-middle attacks
  - Ensure all API endpoints use HTTPS
  - Verify HTTPS is enabled in production environments
  - Implement HSTS headers

```typescript
// ✅ DO: Use secure URLs
const apiUrl = 'https://api.example.com';

// ❌ DON'T: Use insecure HTTP
const apiUrl = 'http://api.example.com';
```

## Input Validation and Sanitization

- **Validate All User Inputs**
  - Implement proper input validation on all forms
  - Sanitize user input before rendering or storing
  - Use frontend frameworks' built-in sanitization when available
  - Implement strict type checking and validation

```typescript
// ✅ DO: Sanitize user input
import DOMPurify from 'dompurify';

function renderUserContent(content) {
  const sanitized = DOMPurify.sanitize(content);
  element.innerHTML = sanitized;
}

// ❌ DON'T: Directly insert user input
function renderUserContent(content) {
  element.innerHTML = content; // XSS vulnerability!
}
```

## Sensitive Data Storage

- **Never Store Sensitive Data in Browser**
  - Avoid storing secrets in localStorage or sessionStorage
  - Don't store user PII in client-side storage
  - Proper separation between frontend, backend, and database
  - Use secure, short-lived tokens for authentication

```typescript
// ✅ DO: Store only non-sensitive data client-side
localStorage.setItem('ui_preferences', JSON.stringify(preferences));

// ❌ DON'T: Store sensitive data
localStorage.setItem('user_token', authToken); // Avoid storing auth tokens in localStorage
```

## CSRF Protection

- **Implement Anti-CSRF Tokens**
  - Include CSRF tokens in all state-changing operations
  - Use SameSite cookie attributes
  - Leverage framework's built-in CSRF protection

```typescript
// ✅ DO: Include CSRF tokens in requests
fetch('/api/data', {
  method: 'POST',
  headers: {
    'X-CSRF-Token': csrfToken,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify(data)
});

// ❌ DON'T: Make state-changing requests without CSRF protection
fetch('/api/data', {
  method: 'POST',
  body: JSON.stringify(data)
});
```

## API Key Protection

- **Never Expose API Keys in Frontend**
  - Keep all API keys and credentials server-side
  - Use environment variables appropriately 
  - Proxy API requests through your backend

```typescript
// ✅ DO: Make API calls to your backend, which handles external APIs
fetch('/api/proxy-service');

// ❌ DON'T: Include API keys in frontend code
const API_KEY = 'sk_live_abcd1234'; // Never do this!
fetch(`https://external-api.com/data?key=${API_KEY}`);
```
