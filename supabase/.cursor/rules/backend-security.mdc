---
description: 
globs: 
alwaysApply: false
---
# Backend Security Best Practices

---
description: Security guidelines for Supabase backend implementation
globs: supabase/functions/**/*.ts, supabase/migrations/**/*.sql
alwaysApply: true
---

This rule provides a checklist for implementing secure backend practices in Supabase applications.

## Authentication Security Checklist

- [ ] **Supabase Auth Configuration**
  - [ ] Email authentication has proper validation
  - [ ] Password policies enforce sufficient complexity
  - [ ] JWT expiration times are appropriate for security level
  - [ ] MFA is implemented for sensitive operations

- [ ] **Edge Functions Authentication**
  - [ ] [functions/hello-world/index.ts](mdc:supabase/functions/hello-world/index.ts) validates authentication tokens
  - [x] [functions/chat-completion/index.ts](mdc:supabase/functions/chat-completion/index.ts) **VULNERABILITY**: No authentication token validation present
  - [x] [functions/image-generation/index.ts](mdc:supabase/functions/image-generation/index.ts) **VULNERABILITY**: No authentication token validation present
  - [ ] JWT verification is implemented properly in [functions/_lib/jwt.ts](mdc:supabase/functions/_lib/jwt.ts) (if exists)

## Authorization Checks Checklist

- [ ] **Row Level Security Policies**
  - [ ] All tables have appropriate RLS policies
  - [ ] Policies follow principle of least privilege
  - [ ] No tables have `CREATE POLICY ... USING (true)` without restrictions

- [ ] **Edge Function Authorization**
  - [ ] [functions/hello-world/index.ts](mdc:supabase/functions/hello-world/index.ts) verifies appropriate permissions
  - [x] [functions/chat-completion/index.ts](mdc:supabase/functions/chat-completion/index.ts) **VULNERABILITY**: No authorization checks implemented
  - [x] [functions/image-generation/index.ts](mdc:supabase/functions/image-generation/index.ts) **VULNERABILITY**: No authorization checks implemented
  - [ ] Role checks implemented before performing sensitive operations

## API Endpoint Protection Checklist

- [x] **CORS Configuration**
  - [x] Appropriate CORS headers set in all edge functions
    - [x] [functions/hello-world/index.ts](mdc:supabase/functions/hello-world/index.ts): ✅ CORS headers are properly set
    - [x] [functions/chat-completion/index.ts](mdc:supabase/functions/chat-completion/index.ts): ✅ CORS headers are properly set
    - [x] [functions/image-generation/index.ts](mdc:supabase/functions/image-generation/index.ts): ✅ CORS headers are properly set
  - [ ] **VULNERABILITY**: Origins are not restricted to known domains (all endpoints use "*" wildcard)
    - **Recommendation**: Replace `"Access-Control-Allow-Origin": "*"` with specific origins

- [x] **Request Validation**
  - [x] [functions/hello-world/index.ts](mdc:supabase/functions/hello-world/index.ts): ✅ Validates input parameters with type checking
  - [x] [functions/chat-completion/index.ts](mdc:supabase/functions/chat-completion/index.ts): ❌ **VULNERABILITY**: No validation of messages array structure
    - **Issue**: The function extracts `messages` from the request but does not validate its structure or content
    - **Recommendation**: Add validation to ensure `messages` is an array with proper role/content structure
  - [x] [functions/image-generation/index.ts](mdc:supabase/functions/image-generation/index.ts): ✅ Basic prompt validation is present
    - **Limited Validation**: Only checks that prompt exists and is a string
    - **Recommendation**: Add content validation (length limits, content filtering)
  - [ ] Input sanitization is incomplete across functions

- [ ] **Rate Limiting**
  - [x] Authentication endpoints: ❌ **VULNERABILITY**: No rate limiting implemented
  - [x] AI endpoints: ❌ **VULNERABILITY**: No rate limiting on expensive OpenAI API calls
    - **Recommendation**: Implement token bucket rate limiting to prevent abuse

## Content Security Concerns

- [x] **AI Content Filtering**
  - [x] [functions/chat-completion/index.ts](mdc:supabase/functions/chat-completion/index.ts): ❌ **VULNERABILITY**: No content filtering or prompt validation
    - **Risk**: Potential for prompt injection attacks or harmful content generation
    - **Recommendation**: Implement content moderation, add usage guidelines
  - [x] [functions/image-generation/index.ts](mdc:supabase/functions/image-generation/index.ts): ❌ **VULNERABILITY**: No content filtering before sending to OpenAI
    - **Risk**: Potential for generating inappropriate images
    - **Recommendation**: Add pre-processing filters or use OpenAI's moderation API

## Security Headers Checklist

- [ ] **Edge Functions Headers**
  - [ ] Content-Security-Policy implemented in relevant functions
  - [ ] X-Frame-Options set to deny or sameorigin
  - [ ] X-Content-Type-Options set to nosniff
  - [ ] Strict-Transport-Security implemented

## Database Security Checklist

- [ ] **Table Access Controls**
  - [ ] Public access restricted appropriately
  - [ ] Foreign key constraints used to maintain data integrity
  - [ ] Sensitive columns have appropriate permissions

- [ ] **RLS Policies**
  - [ ] Check recent migrations for proper RLS:
  - [ ] [migrations/](mdc:supabase/migrations) contains RLS for all tables
  - [ ] Policies verify user identity before allowing operations
  - [ ] No security through obscurity patterns

## Secrets and Environment Variables

- [x] **API Keys and Tokens**
  - [x] [functions/chat-completion/index.ts](mdc:supabase/functions/chat-completion/index.ts): ✅ OpenAI API key properly stored in environment variable
  - [x] [functions/image-generation/index.ts](mdc:supabase/functions/image-generation/index.ts): ✅ OpenAI API key properly stored in environment variable
  - [ ] Third-party API keys properly secured

## Error Handling

- [x] **Function Responses**
  - [x] [functions/hello-world/index.ts](mdc:supabase/functions/hello-world/index.ts): ✅ Error messages are generic and don't expose implementation details
  - [x] [functions/chat-completion/index.ts](mdc:supabase/functions/chat-completion/index.ts): ⚠️ **PARTIAL**: Error handling is present but could leak sensitive information
    - **Issue**: Error message is directly extracted from the Error object
    - **Recommendation**: Use predefined error messages instead of exposing raw error strings
  - [x] [functions/image-generation/index.ts](mdc:supabase/functions/image-generation/index.ts): ⚠️ **PARTIAL**: Similar issue with error message handling
  - [ ] **VULNERABILITY**: No logging mechanism for tracking errors or suspicious activities

## Implementation Verification Process

1. Review each file listed in the checklists above
2. Check off items as they are verified or fixed
3. Document any exceptions that require special handling
4. Perform regular security audits using this checklist

## API Endpoint Security Findings Summary

After analyzing the chat-completion and image-generation endpoints, several critical security issues were identified:

1. **Authentication Missing**: Neither endpoint validates authentication tokens, allowing anonymous access.
   
2. **Authorization Absent**: No authorization checks to verify user permissions or roles.

3. **CORS Too Permissive**: All endpoints use wildcard origins (`*`), allowing any domain to make requests.

4. **Input Validation Weak**: 
   - chat-completion: No validation of message structure or content
   - image-generation: Basic type checking only, no content filtering

5. **Rate Limiting Absent**: No protection against abuse of expensive AI API calls.

6. **Content Safety Issues**: No filtering for potentially harmful prompts.

7. **Error Handling Concerns**: Raw error messages could leak implementation details.

### Recommended Security Improvements

1. **Add Authentication**:
   ```typescript
   // Example authentication check
   const authHeader = req.headers.get('Authorization');
   if (!authHeader) {
     return new Response(JSON.stringify({ error: 'Unauthorized' }), 
       { status: 401, headers: corsHeaders });
   }
   
   // Extract and verify JWT token
   const token = authHeader.replace('Bearer ', '');
   try {
     const claims = await verifyJWT(token);
     // Continue only if verified
   } catch (error) {
     return new Response(JSON.stringify({ error: 'Invalid token' }), 
       { status: 401, headers: corsHeaders });
   }
   ```

2. **Restrict CORS**:
   ```typescript
   const corsHeaders = {
     "Access-Control-Allow-Origin": "https://your-trusted-domain.com",
     "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
   };
   ```

3. **Implement Rate Limiting**:
   ```typescript
   // Add rate limiting middleware
   const rateLimitResult = await checkRateLimit(req);
   if (!rateLimitResult.allowed) {
     return new Response(JSON.stringify({ error: 'Rate limit exceeded' }), 
       { status: 429, headers: corsHeaders });
   }
   ```

4. **Add Content Filtering**:
   ```typescript
   // For chat-completion
   const moderationCheck = await openai.moderations.create({ input: messages[0].content });
   if (moderationCheck.results[0].flagged) {
     return new Response(JSON.stringify({ error: 'Content policy violation' }), 
       { status: 400, headers: corsHeaders });
   }
   ```

5. **Improve Error Handling**:
   ```typescript
   // Map internal errors to safe external messages
   const errorMap = {
     'OPENAI_API_KEY is not set': 'Service configuration error',
     'Failed to generate image': 'Image generation failed',
     // Add more mappings
   };
   
   try {
     // Function code...
   } catch (error) {
     const errorMessage = error instanceof Error ? 
       (errorMap[error.message] || 'An error occurred') : 
       'Unknown error';
     return new Response(JSON.stringify({ error: errorMessage }), 
       { status: 500, headers: corsHeaders });
   }
   ```
